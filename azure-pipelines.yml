# ASP.NET Core\
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core



trigger:
- automated-testing

pool: Jacob's Pool

variables:
- group: Build-Test


# variables:
#   buildConfiguration: 'Release'

steps:
- task: CmdLine@2
  displayName: 'func'
  inputs:
    script: func
    
- script: ls -la
  displayName: "list files"
  workingDirectory: 'src'
  
- task: TerraformInstaller@1
  displayName: Install Terraform
  inputs:
    terraformVersion: 'latest'

# - task: TerraformTaskV4@4
#   displayName: Switch to Testing Workspace
#   inputs:
#     provider: 'azurerm'
#     command: 'custom'
#     outputTo: 'console'
#     customCommand: 'workspace select testing'
#     environmentServiceNameAzureRM: 'azrm'
#     backendAzureRmResourceGroupName: 'automated-testing'
#     backendAzureRmStorageAccountName: 'jmreynolds03storage'
#     backendAzureRmContainerName: 'terraform-state'
#     backendAzureRmKey: 'terraform.tfstate'

# - task: CmdLine@2
#   displayName: 'Terraform init'
#   inputs:
#     script: |
#       cd .
#       # ls -la
#       cd terraform
#       # terraform init

- task: TerraformTaskV4@4
  displayName: Terraform init
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'azrm'
    backendAzureRmResourceGroupName: 'automated-testing'
    backendAzureRmStorageAccountName: 'jmreynolds03storage'
    backendAzureRmContainerName: 'terraform-state'
    backendAzureRmKey: 'terraform.tfstate'
    workingDirectory: terraform

- task: CmdLine@2
  displayName: "Switch to testing Workspace"
  inputs:
    script: 'terraform workspace select testing'
    workingDirectory: terraform

- task: TerraformTaskV4@4
  displayName: Terraform Validate
  inputs:
    provider: 'azurerm'
    command: 'validate'
    workingDirectory: terraform
    
# - task: TerraformTaskV4@4
#   displayName: Terraform Apply
#   inputs:
#     provider: 'azurerm'
#     command: 'custom'
#     outputTo: 'console'
#     customCommand: 'apply -target module.database'
#     environmentServiceNameAzureRM: 'azrm'
#     workingDirectory: terraform
- task: CmdLine@2
  displayName: "Terraform Apply"
  inputs:
    script: 'terraform apply -target module.database -var="database_name=test-db" -var="client_secret=$(client_secret)" -auto-approve'
    workingDirectory: terraform

- task: Bash@3
  displayName: Install .NET Aspire workload
  inputs:
    targetType: 'inline'
    script: dotnet workload install aspire


- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'
  workingDirectory: 'src'

- task: DotNetCoreCLI@2
  displayName: "Run Unit Tests"
  inputs:
    command: 'test'
    workingDirectory: 'src/FancyToDo.UnitTests'


# - task: DotNetCoreCLI@2
#   displayName: "Run Integration Tests"
#   inputs:
#     command: 'test'
#     workingDirectory: 'src/FancyToDo.IntegrationTests'

- task: FileTransform@2
  displayName: Replace values Functional Tests
  inputs:
    folderPath: 'src'
    enableXmlTransform: false
    xmlTransformationRules: 
    jsonTargetFiles: '**/appsettings.json'

# - task: FileTransform@2
#   displayName: Replace values in API
#   inputs:
#     folderPath: 'src/FancyToDo.API'
#     enableXmlTransform: false
#     xmlTransformationRules: 
#     jsonTargetFiles: 'appsettings.json'
  
# - task: FileTransform@2
#   displayName: Replace values in Function App
#   inputs:
#     folderPath: 'src/FancyToDo.Functions'
#     enableXmlTransform: false
#     xmlTransformationRules: 
#     jsonTargetFiles: 'appsettings.json'

- task: DotNetCoreCLI@2
  displayName: "Run Functional Tests"
  inputs:
    command: 'test'
    workingDirectory: 'src/FancyToDo.FunctionalTests'
