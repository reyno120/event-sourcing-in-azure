# ASP.NET Core\
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core



trigger:
- automated-testing

pool: Jacob's Pool

variables:
- group: Build-Test

steps:  

- task: TerraformInstaller@1
  displayName: Install Terraform
  inputs:
    terraformVersion: 'latest'

- task: TerraformTaskV4@4
  displayName: Terraform init
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'azrm'
    backendAzureRmResourceGroupName: 'automated-testing'
    backendAzureRmStorageAccountName: 'jmreynolds03storage'
    backendAzureRmContainerName: 'terraform-state'
    backendAzureRmKey: 'terraform.tfstate'
    workingDirectory: terraform

- task: CmdLine@2
  displayName: "Switch to testing Workspace"
  inputs:
    script: 'terraform workspace select test'
    workingDirectory: terraform

- task: TerraformTaskV4@4
  displayName: Terraform Validate
  inputs:
    provider: 'azurerm'
    command: 'validate'
    workingDirectory: terraform
    
- task: CmdLine@2
  displayName: "Terraform Apply"
  inputs:
    script: 'terraform apply -var-file=".test.tfvars" -var="functionApp_name=$(functionApp-name)" -var="client_secret=$(client_secret)" -auto-approve'
    workingDirectory: terraform
    
- task: PowerShell@2
  displayName: 'Extract CosmosDB Connection String'
  inputs:
    targetType: 'inline'
    script: |
      $tfoutput = (terraform output -raw cosmosDB_connectionString) 
      Write-Host "##vso[task.setvariable variable=ConnectionStrings.CosmosDBConnectionString;issecret=true]$tfoutput"
    workingDirectory: 'terraform'

# https://learn.microsoft.com/en-us/azure/devops/pipelines/process/set-variables-scripts?view=azure-devops&tabs=powershell#set-an-output-variable-for-use-in-future-jobs

- task: Bash@3
  displayName: Install .NET Aspire workload
  inputs:
    targetType: 'inline'
    script: dotnet workload install aspire

- task: FileTransform@2
  displayName: Replace values appsettings
  inputs:
    folderPath: 'src'
    enableXmlTransform: false
    xmlTransformationRules: 
    jsonTargetFiles: '**/appsettings.json'

- task: 'DotNetCoreCLI@2'
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    projects: 'src/FancyToDo.Functions/FancyToDo.Functions.csproj'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: 'src/FancyToDo.Functions/FancyToDo.Functions.csproj'
    arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration $(buildConfiguration)
  
    
- task: ArchiveFiles@2
  displayName: 'Archive files'
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
    includeRootFolder: false
    archiveType: zip
    archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
    replaceExistingArchive: true
- publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
  artifact: drop

- download: current
  artifact: drop
- task: AzureFunctionApp@2
  displayName: "Deploy Azure Function App"
  inputs:
    azureSubscription: 'azrm-all'
    appType: functionApp
    appName: $(functionApp-name)
    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
    deploymentMethod: 'zipDeploy'

- task: DotNetCoreCLI@2
  displayName: "Run Unit Tests"
  inputs:
    command: 'test'
    workingDirectory: 'src/FancyToDo.UnitTests'
  
- task: Delay@1
  inputs:
    delayForMinutes: '2'

- task: DotNetCoreCLI@2
  displayName: "Run Functional Tests"
  inputs:
    command: 'test'
    workingDirectory: 'src/FancyToDo.FunctionalTests'

- task: TerraformTaskV4@4
  displayName: 'Terraform Destroy'
  inputs:
    provider: 'azurerm'
    command: 'destroy'
    workingDirectory: 'terraform'
    commandOptions: '-var-file=".test.tfvars" -var="functionApp_name=$(functionApp-name)" -var="client_secret=$(client_secret)" -auto-approve'
    environmentServiceNameAzureRM: 'azrm-all'