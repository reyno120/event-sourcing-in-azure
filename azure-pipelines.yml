# ASP.NET Core\
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core



trigger:
- automated-testing

pool: Jacob's Pool

variables:
- group: Build-Test


# variables:
#   buildConfiguration: 'Release'

steps:  
# - task: CmdLine@2
#   displayName: "list"
#   inputs:
#     script: 'rmdir .terraform'
#     workingDirectory: terraform

- task: TerraformInstaller@1
  displayName: Install Terraform
  inputs:
    terraformVersion: 'latest'

- task: TerraformTaskV4@4
  displayName: Terraform init
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'azrm'
    backendAzureRmResourceGroupName: 'automated-testing'
    backendAzureRmStorageAccountName: 'jmreynolds03storage'
    backendAzureRmContainerName: 'terraform-state'
    backendAzureRmKey: 'terraform.tfstate'
    workingDirectory: terraform

- task: CmdLine@2
  displayName: "Switch to testing Workspace"
  inputs:
    script: 'terraform workspace select test'
    workingDirectory: terraform

- task: TerraformTaskV4@4
  displayName: Terraform Validate
  inputs:
    provider: 'azurerm'
    command: 'validate'
    workingDirectory: terraform
    
- task: CmdLine@2
  displayName: "Terraform Apply"
  inputs:
    script: 'terraform apply -target module.database -var="resource_group_name=automated-testing-test" -var="client_secret=$(client_secret)" -auto-approve'
    workingDirectory: terraform

- task: Bash@3
  displayName: Install .NET Aspire workload
  inputs:
    targetType: 'inline'
    script: dotnet workload install aspire


# - script: dotnet build --configuration $(buildConfiguration)
#   displayName: 'dotnet build $(buildConfiguration)'
#   workingDirectory: 'src'

- task: 'DotNetCoreCLI@2'
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: 'src/FancyToDo.Functions/FancyToDo.Functions.csproj'
    arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration $(buildConfiguration)
    # $(System.DefaultWorkingDirectory)/
  
# - task: DotNetCoreCLI@2
#   displayName: Publish Function App
#   inputs:
#     command: publish
#     arguments: '--configuration $(buildConfiguration) --output publish_output'
#     projects: 'src/FancyToDo.Functions/FancyToDo.Functions.csproj'
#     publishWebProjects: false
#     modifyOutputPath: false
#     zipAfterPublish: false
- task: ArchiveFiles@2
  displayName: 'Archive files'
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
    includeRootFolder: false
    archiveType: zip
    archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
    replaceExistingArchive: true
- publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
  artifact: drop

# - task: ArchiveFiles@2
#   displayName: "Archive files"
#   inputs:
#     rootFolderOrFile: "$(System.DefaultWorkingDirectory)/publish_output"
#     includeRootFolder: false
#     archiveFile: "$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip"
# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'
#     artifactName: 'drop'

- download: current
  artifact: drop
- task: AzureFunctionApp@2
  inputs:
    azureSubscription: 'azrm'
    appType: functionApp
    appName: jmreynolds03-functionApp
    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
    deploymentMethod: 'zipDeploy'
  
# - task: AzureFunctionApp@2
#   displayName: 'Deploy Function App'
#   inputs:
#     azureSubscription: 'azrm'
#     appType: functionApp # this specifies a Windows-based function app
#     appName: FancyFunction
#     package: $(System.ArtifactsDirectory)/**/*.zip
#     deploymentMethod: 'auto'

- task: DotNetCoreCLI@2
  displayName: "Run Unit Tests"
  inputs:
    command: 'test'
    workingDirectory: 'src/FancyToDo.UnitTests'


# - task: DotNetCoreCLI@2
#   displayName: "Run Integration Tests"
#   inputs:
#     command: 'test'
#     workingDirectory: 'src/FancyToDo.IntegrationTests'

- task: FileTransform@2
  displayName: Replace values Functional Tests
  inputs:
    folderPath: 'src'
    enableXmlTransform: false
    xmlTransformationRules: 
    jsonTargetFiles: '**/appsettings.json'
  
# - task: FileTransform@2
#   displayName: Replace values in Function App
#   inputs:
#     folderPath: 'src/FancyToDo.Functions'
#     enableXmlTransform: false
#     xmlTransformationRules: 
#     jsonTargetFiles: 'appsettings.json'

- task: DotNetCoreCLI@2
  displayName: "Run Functional Tests"
  inputs:
    command: 'test'
    workingDirectory: 'src/FancyToDo.FunctionalTests'
